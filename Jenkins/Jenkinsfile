pipeline {
    tools {nodejs "nodejs"}
    environment {
        build_mode: "stage" 
        finalArtifactName = "$GIT_BRANCH.$GIT_COMMIT.$BUILD_ID" + ".zip"
    }
    stages {
        stage('Versioning') {
            steps {
                sh 'printenv'
            }
        }        
        stage('Installing') {
            steps {
                echo 'Installation in progress..'
                sh 'npm install'
                echo 'Installation Finished'
            }
        }          
        stage('Lint') {
            steps {
                echo 'Linting in progress..'
                sh 'npm run lint'
                echo 'Linting Finished'
            }
        }        
        stage('Build') {
            steps {
                echo 'Building in progress..'
                sh 'npm run preBuild'
                sh "npm run build:${build_mode}"
                echo 'Building Finished'
            }
        }
        stage('Post Build') {
            steps {
                echo 'Post Building in progress..'
                sh 'npm run postBuild'
                echo 'Post Building Finished'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing in progress..'
                sh 'npm run test'
                echo 'Testing Finished'
            }
        }

        stage('Archiving') {
            steps {
                echo 'Archiving in progress..'
                sh """
                cd outputs
                zip -r -qq ${finalArtifactName}.${build_mode} dist/${build_mode}
                cd ..
                """
                echo 'Archiving Finished'
            }
        }        

        stage('Upload') {
            steps {
                
                
            }

            post {

            }
        }


        stage('Dockerizing') {
            steps {
                script {
                    // echo "Building docker image"
                    
                    // //def customImage = docker.build("my-image:${env.BUILD_ID}", "./Docker") 

                    // sh """
                    //     docker build \
                    //         -f Docker/Dockerfile \
                    //         -t $dockerHubRepo:$GIT_BRANCH-latest \
                    //         -t $dockerHubRepo:$GIT_BRANCH-$BUILD_ID \
                    //         -t $dockerHubRepo:$GIT_BRANCH-$GIT_COMMIT \
                    //         .
                    // """
                    // echo "Building docker image finish"
                    // echo "Images build locally :-"
                    // sh """
                    //     docker images
                    // """
                }
            }
        } 

        stage('DockerHub Push') {
            steps {

                // withCredentials([usernamePassword(credentialsId: "$dockerHubCredId", usernameVariable: 'USERNAME_DOCKER_HUB', passwordVariable: 'PASSWORD_DOCKER_HUB')]) {
                //     sh """

                //         docker login --username $USERNAME_DOCKER_HUB --password $PASSWORD_DOCKER_HUB

                //         docker push $dockerHubRepo:$GIT_BRANCH-latest
                //         docker push $dockerHubRepo:$GIT_BRANCH-$BUILD_ID
                //         docker push $dockerHubRepo:$GIT_BRANCH-$GIT_COMMIT
                    
                //     """
                
                // }
            }
        }        

        stage('Clean up') {
            steps {
                sh """
                    docker rmi $dockerECRRepo:$GIT_BRANCH-latest
                    docker rmi $dockerECRRepo:$GIT_BRANCH-$BUILD_ID
                    docker rmi $dockerECRRepo:$GIT_BRANCH-$GIT_COMMIT
                    docker rmi $dockerHubRepo:$GIT_BRANCH-latest
                    docker rmi $dockerHubRepo:$GIT_BRANCH-$BUILD_ID
                    docker rmi $dockerHubRepo:$GIT_BRANCH-$GIT_COMMIT
                """
            }
        }        


    }
}
