'use strict'
const path = require('path');
//const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

const isMiniCssPlugin = true;

// const webpackBaseDevConfig = webpackBaseConfig('dev')

// const webpackDevConfig = {
//     ...webpackBaseDevConfig,
//     plugins: [...webpackBaseDevConfig.plugins, new ReactRefreshWebpackPlugin()]

// }

// console.log(webpackDevConfig)

// return webpackDevConfig

module.exports = (env, argv) => {
    console.log("in w.c", env, argv)    

    const isDevelopment = argv.mode === 'development'

    return ({
        entry: {
            main: './src/index.tsx',
        },
        output: {
            path: path.join(__dirname, '/dist'),
            filename: '[name]-bundle.js',
            publicPath: '/public/'
        },
        devServer: {
            static: './dist',
            port: 3100,
            hot: true
        },
        module: {
            rules: [{
                test: /\.(js|jsx|tsx|ts)$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        plugins: [
                            isDevelopment && require("react-refresh/babel")
                        ].filter(Boolean)
                    }
                },

            },{
                test: /\.css$/i,
                use: [isMiniCssPlugin ? MiniCssExtractPlugin.loader : "style-loader" , "css-loader"],  //style-loader
            },{
                test: /\.(s(a|c)ss)$/,
                use: [isMiniCssPlugin ? MiniCssExtractPlugin.loader : "style-loader", "css-loader", "sass-loader"],  //style-loader
            },{
                test: /\.(woff|woff2|eot|ttf)$/,
                use: [{
                    loader: 'url-loader',
                    options: { encoding: 'utf8', name: "public/[name]-[hash].[ext]"}
                }],
            },{
                test: /\.(svg|jpg|png)$/,
                use: [{
                    loader: 'url-loader',
                    options: { 
                        name: "public/[name]-[hash].[ext]",
                        limit: 10000,
                        fallback: "file-loader",           
    
                    }
                }],
            }]
        },
       
        resolve: {
            extensions: ['.tsx', '.ts', '.jsx', '.js'],
            alias: {
                '@modals': path.resolve(__dirname, "src/interfaces/"),
                '@modules': path.resolve(__dirname, "src/modules/"),
                '@utils': path.resolve(__dirname, "src/utils/"),
                '@srcRoot': path.resolve(__dirname, "src/"),
                '@comp': path.resolve(__dirname, "src/commonComponent/")

    
            }, 
        },
        plugins:[
            new MiniCssExtractPlugin({filename: "[name].css", chunkFilename: "[id].css"}),
            new HtmlWebpackPlugin({
                template: './assets/index.html'
            }),
            isDevelopment && new ReactRefreshWebpackPlugin(),
        ].filter(Boolean),
        optimization: {
            runtimeChunk: 'single',
                splitChunks: {
                    cacheGroups: {
                        vendor: {
                            test: /[\\/]node_modules[\\/]/,
                            name: 'vendors',
                            chunks: 'all',
                            reuseExistingChunk: true,
                        }
                    }
                }
        },
        
        mode: 'development',
        devtool: 'inline-source-map',
    
    })
}
